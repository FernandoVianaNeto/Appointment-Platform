// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -package http_client -destination /home/fernandoviana/Documentos/Appointment-Platform/backend/test/mocks/adapters/http_client/mock_client.go
//

// Package http_client is a generated GoMock package.
package http_client

import (
	http_client "appointment-platform-backend-backend/pkg/client/http"
	context "context"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
	isgomock struct{}
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockHTTPClient) Delete(ctx context.Context, endpoint string, params url.Values, body []byte) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, endpoint, params, body)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Delete indicates an expected call of Delete.
func (mr *MockHTTPClientMockRecorder) Delete(ctx, endpoint, params, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHTTPClient)(nil).Delete), ctx, endpoint, params, body)
}

// Do mocks base method.
func (m *MockHTTPClient) Do(ctx context.Context, method, endpointPath string, params url.Values, body []byte) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, method, endpointPath, params, body)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(ctx, method, endpointPath, params, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), ctx, method, endpointPath, params, body)
}

// Get mocks base method.
func (m *MockHTTPClient) Get(ctx context.Context, endpointPath string, params url.Values) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, endpointPath, params)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockHTTPClientMockRecorder) Get(ctx, endpointPath, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPClient)(nil).Get), ctx, endpointPath, params)
}

// GetWithBody mocks base method.
func (m *MockHTTPClient) GetWithBody(ctx context.Context, endpointPath string, params url.Values, body []byte) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithBody", ctx, endpointPath, params, body)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithBody indicates an expected call of GetWithBody.
func (mr *MockHTTPClientMockRecorder) GetWithBody(ctx, endpointPath, params, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithBody", reflect.TypeOf((*MockHTTPClient)(nil).GetWithBody), ctx, endpointPath, params, body)
}

// Post mocks base method.
func (m *MockHTTPClient) Post(ctx context.Context, endpoint string, params url.Values, body []byte) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, endpoint, params, body)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Post indicates an expected call of Post.
func (mr *MockHTTPClientMockRecorder) Post(ctx, endpoint, params, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTPClient)(nil).Post), ctx, endpoint, params, body)
}

// SetHeaders mocks base method.
func (m *MockHTTPClient) SetHeaders(headers ...http_client.OptionalHeaders) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range headers {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetHeaders", varargs...)
}

// SetHeaders indicates an expected call of SetHeaders.
func (mr *MockHTTPClientMockRecorder) SetHeaders(headers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeaders", reflect.TypeOf((*MockHTTPClient)(nil).SetHeaders), headers...)
}
