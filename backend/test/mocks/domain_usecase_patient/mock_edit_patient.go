// Code generated by MockGen. DO NOT EDIT.
// Source: edit_patient.go
//
// Generated by this command:
//
//	mockgen -source edit_patient.go -package domain_usecase_patient -destination /home/fernandoviana/Documentos/Appointment-Platform/backend/test/mocks/domain_usecase_patient/mock_edit_patient.go
//

// Package domain_usecase_patient is a generated GoMock package.
package domain_usecase_patient

import (
	dto "appointment-platform-backend-backend/internal/domain/dto"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEditPatientUsecaseInterface is a mock of EditPatientUsecaseInterface interface.
type MockEditPatientUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEditPatientUsecaseInterfaceMockRecorder
	isgomock struct{}
}

// MockEditPatientUsecaseInterfaceMockRecorder is the mock recorder for MockEditPatientUsecaseInterface.
type MockEditPatientUsecaseInterfaceMockRecorder struct {
	mock *MockEditPatientUsecaseInterface
}

// NewMockEditPatientUsecaseInterface creates a new mock instance.
func NewMockEditPatientUsecaseInterface(ctrl *gomock.Controller) *MockEditPatientUsecaseInterface {
	mock := &MockEditPatientUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockEditPatientUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEditPatientUsecaseInterface) EXPECT() *MockEditPatientUsecaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockEditPatientUsecaseInterface) Execute(ctx context.Context, input dto.EditPatientInputDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockEditPatientUsecaseInterfaceMockRecorder) Execute(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockEditPatientUsecaseInterface)(nil).Execute), ctx, input)
}
