// Code generated by MockGen. DO NOT EDIT.
// Source: get_next_appointments_send_remider.usecase.go
//
// Generated by this command:
//
//	mockgen -source get_next_appointments_send_remider.usecase.go -package domain_usecase_appointment -destination /home/fernandoviana/Documentos/Appointment-Platform/backend/test/mocks/domain_usecase_appointment/mock_get_next_appointments_send_remider.usecase.go
//

// Package domain_usecase_appointment is a generated GoMock package.
package domain_usecase_appointment

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGetNextAppointmentsAndSendReminder is a mock of GetNextAppointmentsAndSendReminder interface.
type MockGetNextAppointmentsAndSendReminder struct {
	ctrl     *gomock.Controller
	recorder *MockGetNextAppointmentsAndSendReminderMockRecorder
	isgomock struct{}
}

// MockGetNextAppointmentsAndSendReminderMockRecorder is the mock recorder for MockGetNextAppointmentsAndSendReminder.
type MockGetNextAppointmentsAndSendReminderMockRecorder struct {
	mock *MockGetNextAppointmentsAndSendReminder
}

// NewMockGetNextAppointmentsAndSendReminder creates a new mock instance.
func NewMockGetNextAppointmentsAndSendReminder(ctrl *gomock.Controller) *MockGetNextAppointmentsAndSendReminder {
	mock := &MockGetNextAppointmentsAndSendReminder{ctrl: ctrl}
	mock.recorder = &MockGetNextAppointmentsAndSendReminderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetNextAppointmentsAndSendReminder) EXPECT() *MockGetNextAppointmentsAndSendReminderMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetNextAppointmentsAndSendReminder) Execute(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockGetNextAppointmentsAndSendReminderMockRecorder) Execute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetNextAppointmentsAndSendReminder)(nil).Execute), ctx)
}
