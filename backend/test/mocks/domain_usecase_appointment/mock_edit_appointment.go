// Code generated by MockGen. DO NOT EDIT.
// Source: edit_appointment.go
//
// Generated by this command:
//
//	mockgen -source edit_appointment.go -package domain_usecase_appointment -destination /home/fernandoviana/Documentos/Appointment-Platform/backend/test/mocks/domain_usecase_appointment/mock_edit_appointment.go
//

// Package domain_usecase_appointment is a generated GoMock package.
package domain_usecase_appointment

import (
	dto "appointment-platform-backend-backend/internal/domain/dto"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEditAppointmentUsecaseInterface is a mock of EditAppointmentUsecaseInterface interface.
type MockEditAppointmentUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEditAppointmentUsecaseInterfaceMockRecorder
	isgomock struct{}
}

// MockEditAppointmentUsecaseInterfaceMockRecorder is the mock recorder for MockEditAppointmentUsecaseInterface.
type MockEditAppointmentUsecaseInterfaceMockRecorder struct {
	mock *MockEditAppointmentUsecaseInterface
}

// NewMockEditAppointmentUsecaseInterface creates a new mock instance.
func NewMockEditAppointmentUsecaseInterface(ctrl *gomock.Controller) *MockEditAppointmentUsecaseInterface {
	mock := &MockEditAppointmentUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockEditAppointmentUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEditAppointmentUsecaseInterface) EXPECT() *MockEditAppointmentUsecaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockEditAppointmentUsecaseInterface) Execute(ctx context.Context, input dto.EditAppointmentInputDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockEditAppointmentUsecaseInterfaceMockRecorder) Execute(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockEditAppointmentUsecaseInterface)(nil).Execute), ctx, input)
}
