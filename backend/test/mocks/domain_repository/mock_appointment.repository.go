// Code generated by MockGen. DO NOT EDIT.
// Source: appointment.repository.go
//
// Generated by this command:
//
//	mockgen -source appointment.repository.go -package domain_repository -destination /home/fernandoviana/Documentos/Appointment-Platform/backend/test/mocks/domain_repository/mock_appointment.repository.go
//

// Package domain_repository is a generated GoMock package.
package domain_repository

import (
	dto "appointment-platform-backend-backend/internal/domain/dto"
	entity "appointment-platform-backend-backend/internal/domain/entity"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockAppointmentRepositoryInterface is a mock of AppointmentRepositoryInterface interface.
type MockAppointmentRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAppointmentRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockAppointmentRepositoryInterfaceMockRecorder is the mock recorder for MockAppointmentRepositoryInterface.
type MockAppointmentRepositoryInterfaceMockRecorder struct {
	mock *MockAppointmentRepositoryInterface
}

// NewMockAppointmentRepositoryInterface creates a new mock instance.
func NewMockAppointmentRepositoryInterface(ctrl *gomock.Controller) *MockAppointmentRepositoryInterface {
	mock := &MockAppointmentRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAppointmentRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppointmentRepositoryInterface) EXPECT() *MockAppointmentRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CountDocuments mocks base method.
func (m *MockAppointmentRepositoryInterface) CountDocuments(ctx context.Context, input dto.ListAppointmentInputDto) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDocuments", ctx, input)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDocuments indicates an expected call of CountDocuments.
func (mr *MockAppointmentRepositoryInterfaceMockRecorder) CountDocuments(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDocuments", reflect.TypeOf((*MockAppointmentRepositoryInterface)(nil).CountDocuments), ctx, input)
}

// Create mocks base method.
func (m *MockAppointmentRepositoryInterface) Create(ctx context.Context, input entity.Appointment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAppointmentRepositoryInterfaceMockRecorder) Create(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAppointmentRepositoryInterface)(nil).Create), ctx, input)
}

// DeleteMany mocks base method.
func (m *MockAppointmentRepositoryInterface) DeleteMany(ctx context.Context, appointmentIds []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", ctx, appointmentIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockAppointmentRepositoryInterfaceMockRecorder) DeleteMany(ctx, appointmentIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockAppointmentRepositoryInterface)(nil).DeleteMany), ctx, appointmentIds)
}

// Edit mocks base method.
func (m *MockAppointmentRepositoryInterface) Edit(ctx context.Context, input dto.EditAppointmentInputDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockAppointmentRepositoryInterfaceMockRecorder) Edit(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockAppointmentRepositoryInterface)(nil).Edit), ctx, input)
}

// GetNextAppointments mocks base method.
func (m *MockAppointmentRepositoryInterface) GetNextAppointments(ctx context.Context, nextTime time.Duration) (*[]entity.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextAppointments", ctx, nextTime)
	ret0, _ := ret[0].(*[]entity.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextAppointments indicates an expected call of GetNextAppointments.
func (mr *MockAppointmentRepositoryInterfaceMockRecorder) GetNextAppointments(ctx, nextTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextAppointments", reflect.TypeOf((*MockAppointmentRepositoryInterface)(nil).GetNextAppointments), ctx, nextTime)
}

// List mocks base method.
func (m *MockAppointmentRepositoryInterface) List(ctx context.Context, input dto.ListAppointmentInputDto) ([]entity.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, input)
	ret0, _ := ret[0].([]entity.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAppointmentRepositoryInterfaceMockRecorder) List(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAppointmentRepositoryInterface)(nil).List), ctx, input)
}

// UpdateReminderSent mocks base method.
func (m *MockAppointmentRepositoryInterface) UpdateReminderSent(ctx context.Context, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReminderSent", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReminderSent indicates an expected call of UpdateReminderSent.
func (mr *MockAppointmentRepositoryInterfaceMockRecorder) UpdateReminderSent(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReminderSent", reflect.TypeOf((*MockAppointmentRepositoryInterface)(nil).UpdateReminderSent), ctx, uuid)
}

// UpdateStatus mocks base method.
func (m *MockAppointmentRepositoryInterface) UpdateStatus(ctx context.Context, status, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, status, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockAppointmentRepositoryInterfaceMockRecorder) UpdateStatus(ctx, status, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockAppointmentRepositoryInterface)(nil).UpdateStatus), ctx, status, uuid)
}
