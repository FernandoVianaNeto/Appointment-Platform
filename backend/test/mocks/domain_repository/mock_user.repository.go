// Code generated by MockGen. DO NOT EDIT.
// Source: user.repository.go
//
// Generated by this command:
//
//	mockgen -source user.repository.go -package domain_repository -destination /home/fernandoviana/Documentos/Appointment-Platform/backend/test/mocks/domain_repository/mock_user.repository.go
//

// Package domain_repository is a generated GoMock package.
package domain_repository

import (
	dto "appointment-platform-backend-backend/internal/domain/dto"
	entity "appointment-platform-backend-backend/internal/domain/entity"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepositoryInterface) Create(ctx context.Context, arg1 entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryInterfaceMockRecorder) Create(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepositoryInterface)(nil).Create), ctx, arg1)
}

// GetByEmailAndAuthProvider mocks base method.
func (m *MockUserRepositoryInterface) GetByEmailAndAuthProvider(ctx context.Context, email, authProvider string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmailAndAuthProvider", ctx, email, authProvider)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmailAndAuthProvider indicates an expected call of GetByEmailAndAuthProvider.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetByEmailAndAuthProvider(ctx, email, authProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmailAndAuthProvider", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetByEmailAndAuthProvider), ctx, email, authProvider)
}

// GetByUuid mocks base method.
func (m *MockUserRepositoryInterface) GetByUuid(ctx context.Context, userUuid string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUuid", ctx, userUuid)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUuid indicates an expected call of GetByUuid.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetByUuid(ctx, userUuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUuid", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetByUuid), ctx, userUuid)
}

// UpdateByUuid mocks base method.
func (m *MockUserRepositoryInterface) UpdateByUuid(ctx context.Context, input dto.UpdateUserInputDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByUuid", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByUuid indicates an expected call of UpdateByUuid.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdateByUuid(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByUuid", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdateByUuid), ctx, input)
}

// UpdatePassword mocks base method.
func (m *MockUserRepositoryInterface) UpdatePassword(ctx context.Context, input dto.UserResetPasswordInputDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdatePassword(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdatePassword), ctx, input)
}
