// Code generated by MockGen. DO NOT EDIT.
// Source: patient.repository.go
//
// Generated by this command:
//
//	mockgen -source patient.repository.go -package domain_repository -destination /home/fernandoviana/Documentos/Appointment-Platform/backend/test/mocks/domain_repository/mock_patient.repository.go
//

// Package domain_repository is a generated GoMock package.
package domain_repository

import (
	dto "appointment-platform-backend-backend/internal/domain/dto"
	entity "appointment-platform-backend-backend/internal/domain/entity"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPatientRepositoryInterface is a mock of PatientRepositoryInterface interface.
type MockPatientRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPatientRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockPatientRepositoryInterfaceMockRecorder is the mock recorder for MockPatientRepositoryInterface.
type MockPatientRepositoryInterfaceMockRecorder struct {
	mock *MockPatientRepositoryInterface
}

// NewMockPatientRepositoryInterface creates a new mock instance.
func NewMockPatientRepositoryInterface(ctrl *gomock.Controller) *MockPatientRepositoryInterface {
	mock := &MockPatientRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPatientRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientRepositoryInterface) EXPECT() *MockPatientRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CountDocuments mocks base method.
func (m *MockPatientRepositoryInterface) CountDocuments(ctx context.Context, input dto.ListPatientInputDto) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDocuments", ctx, input)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDocuments indicates an expected call of CountDocuments.
func (mr *MockPatientRepositoryInterfaceMockRecorder) CountDocuments(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDocuments", reflect.TypeOf((*MockPatientRepositoryInterface)(nil).CountDocuments), ctx, input)
}

// Create mocks base method.
func (m *MockPatientRepositoryInterface) Create(ctx context.Context, input entity.Patient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPatientRepositoryInterfaceMockRecorder) Create(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPatientRepositoryInterface)(nil).Create), ctx, input)
}

// Delete mocks base method.
func (m *MockPatientRepositoryInterface) Delete(ctx context.Context, uuid string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, uuid)
}

// Delete indicates an expected call of Delete.
func (mr *MockPatientRepositoryInterfaceMockRecorder) Delete(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPatientRepositoryInterface)(nil).Delete), ctx, uuid)
}

// DeleteMany mocks base method.
func (m *MockPatientRepositoryInterface) DeleteMany(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockPatientRepositoryInterfaceMockRecorder) DeleteMany(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockPatientRepositoryInterface)(nil).DeleteMany), ctx, ids)
}

// Edit mocks base method.
func (m *MockPatientRepositoryInterface) Edit(ctx context.Context, input dto.EditPatientInputDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockPatientRepositoryInterfaceMockRecorder) Edit(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockPatientRepositoryInterface)(nil).Edit), ctx, input)
}

// GetByUuid mocks base method.
func (m *MockPatientRepositoryInterface) GetByUuid(ctx context.Context, uuid string) (entity.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUuid", ctx, uuid)
	ret0, _ := ret[0].(entity.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUuid indicates an expected call of GetByUuid.
func (mr *MockPatientRepositoryInterfaceMockRecorder) GetByUuid(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUuid", reflect.TypeOf((*MockPatientRepositoryInterface)(nil).GetByUuid), ctx, uuid)
}

// List mocks base method.
func (m *MockPatientRepositoryInterface) List(ctx context.Context, input dto.ListPatientInputDto) ([]entity.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, input)
	ret0, _ := ret[0].([]entity.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPatientRepositoryInterfaceMockRecorder) List(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPatientRepositoryInterface)(nil).List), ctx, input)
}
