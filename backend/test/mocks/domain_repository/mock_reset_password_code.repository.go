// Code generated by MockGen. DO NOT EDIT.
// Source: reset_password_code.repository.go
//
// Generated by this command:
//
//	mockgen -source reset_password_code.repository.go -package domain_repository -destination /home/fernandoviana/Documentos/Appointment-Platform/backend/test/mocks/domain_repository/mock_reset_password_code.repository.go
//

// Package domain_repository is a generated GoMock package.
package domain_repository

import (
	entity "appointment-platform-backend-backend/internal/domain/entity"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResetPasswordCodeRepositoryInterface is a mock of ResetPasswordCodeRepositoryInterface interface.
type MockResetPasswordCodeRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockResetPasswordCodeRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockResetPasswordCodeRepositoryInterfaceMockRecorder is the mock recorder for MockResetPasswordCodeRepositoryInterface.
type MockResetPasswordCodeRepositoryInterfaceMockRecorder struct {
	mock *MockResetPasswordCodeRepositoryInterface
}

// NewMockResetPasswordCodeRepositoryInterface creates a new mock instance.
func NewMockResetPasswordCodeRepositoryInterface(ctrl *gomock.Controller) *MockResetPasswordCodeRepositoryInterface {
	mock := &MockResetPasswordCodeRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockResetPasswordCodeRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResetPasswordCodeRepositoryInterface) EXPECT() *MockResetPasswordCodeRepositoryInterfaceMockRecorder {
	return m.recorder
}

// ActivateCode mocks base method.
func (m *MockResetPasswordCodeRepositoryInterface) ActivateCode(ctx context.Context, email string, code int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateCode", ctx, email, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateCode indicates an expected call of ActivateCode.
func (mr *MockResetPasswordCodeRepositoryInterfaceMockRecorder) ActivateCode(ctx, email, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateCode", reflect.TypeOf((*MockResetPasswordCodeRepositoryInterface)(nil).ActivateCode), ctx, email, code)
}

// Create mocks base method.
func (m *MockResetPasswordCodeRepositoryInterface) Create(ctx context.Context, input entity.ResetPasswordCode) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResetPasswordCodeRepositoryInterfaceMockRecorder) Create(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResetPasswordCodeRepositoryInterface)(nil).Create), ctx, input)
}

// FindActive mocks base method.
func (m *MockResetPasswordCodeRepositoryInterface) FindActive(ctx context.Context, email string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActive", ctx, email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActive indicates an expected call of FindActive.
func (mr *MockResetPasswordCodeRepositoryInterfaceMockRecorder) FindActive(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActive", reflect.TypeOf((*MockResetPasswordCodeRepositoryInterface)(nil).FindActive), ctx, email)
}

// IsValidCode mocks base method.
func (m *MockResetPasswordCodeRepositoryInterface) IsValidCode(ctx context.Context, email string, code int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidCode", ctx, email, code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidCode indicates an expected call of IsValidCode.
func (mr *MockResetPasswordCodeRepositoryInterfaceMockRecorder) IsValidCode(ctx, email, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidCode", reflect.TypeOf((*MockResetPasswordCodeRepositoryInterface)(nil).IsValidCode), ctx, email, code)
}
