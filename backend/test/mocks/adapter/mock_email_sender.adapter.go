// Code generated by MockGen. DO NOT EDIT.
// Source: email_sender.adapter.go
//
// Generated by this command:
//
//	mockgen -source email_sender.adapter.go -package adapter -destination /home/fernandoviana/Documentos/Appointment-Platform/backend/test/mocks/adapter/mock_email_sender.adapter.go
//

// Package adapter is a generated GoMock package.
package adapter

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmailSenderAdapterInterface is a mock of EmailSenderAdapterInterface interface.
type MockEmailSenderAdapterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderAdapterInterfaceMockRecorder
	isgomock struct{}
}

// MockEmailSenderAdapterInterfaceMockRecorder is the mock recorder for MockEmailSenderAdapterInterface.
type MockEmailSenderAdapterInterfaceMockRecorder struct {
	mock *MockEmailSenderAdapterInterface
}

// NewMockEmailSenderAdapterInterface creates a new mock instance.
func NewMockEmailSenderAdapterInterface(ctrl *gomock.Controller) *MockEmailSenderAdapterInterface {
	mock := &MockEmailSenderAdapterInterface{ctrl: ctrl}
	mock.recorder = &MockEmailSenderAdapterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSenderAdapterInterface) EXPECT() *MockEmailSenderAdapterInterfaceMockRecorder {
	return m.recorder
}

// SendAppointmentReminder mocks base method.
func (m *MockEmailSenderAdapterInterface) SendAppointmentReminder(ctx context.Context, toEmail, procedure, doctor, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAppointmentReminder", ctx, toEmail, procedure, doctor, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAppointmentReminder indicates an expected call of SendAppointmentReminder.
func (mr *MockEmailSenderAdapterInterfaceMockRecorder) SendAppointmentReminder(ctx, toEmail, procedure, doctor, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppointmentReminder", reflect.TypeOf((*MockEmailSenderAdapterInterface)(nil).SendAppointmentReminder), ctx, toEmail, procedure, doctor, link)
}

// SendResetPasswordEmail mocks base method.
func (m *MockEmailSenderAdapterInterface) SendResetPasswordEmail(ctx context.Context, toEmail string, code int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetPasswordEmail", ctx, toEmail, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetPasswordEmail indicates an expected call of SendResetPasswordEmail.
func (mr *MockEmailSenderAdapterInterfaceMockRecorder) SendResetPasswordEmail(ctx, toEmail, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetPasswordEmail", reflect.TypeOf((*MockEmailSenderAdapterInterface)(nil).SendResetPasswordEmail), ctx, toEmail, code)
}
