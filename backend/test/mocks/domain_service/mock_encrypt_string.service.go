// Code generated by MockGen. DO NOT EDIT.
// Source: encrypt_string.service.go
//
// Generated by this command:
//
//	mockgen -source encrypt_string.service.go -package domain_service -destination /home/fernandoviana/Documentos/Appointment-Platform/backend/test/mocks/domain_service/mock_encrypt_string.service.go
//

// Package domain_service is a generated GoMock package.
package domain_service

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEncryptStringServiceInterface is a mock of EncryptStringServiceInterface interface.
type MockEncryptStringServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptStringServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockEncryptStringServiceInterfaceMockRecorder is the mock recorder for MockEncryptStringServiceInterface.
type MockEncryptStringServiceInterfaceMockRecorder struct {
	mock *MockEncryptStringServiceInterface
}

// NewMockEncryptStringServiceInterface creates a new mock instance.
func NewMockEncryptStringServiceInterface(ctrl *gomock.Controller) *MockEncryptStringServiceInterface {
	mock := &MockEncryptStringServiceInterface{ctrl: ctrl}
	mock.recorder = &MockEncryptStringServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptStringServiceInterface) EXPECT() *MockEncryptStringServiceInterfaceMockRecorder {
	return m.recorder
}

// EncryptString mocks base method.
func (m *MockEncryptStringServiceInterface) EncryptString(str string, cost int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptString", str, cost)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptString indicates an expected call of EncryptString.
func (mr *MockEncryptStringServiceInterfaceMockRecorder) EncryptString(str, cost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptString", reflect.TypeOf((*MockEncryptStringServiceInterface)(nil).EncryptString), str, cost)
}
